[["index.html", "Data visualization with R and ggplot2: from data to publication-quality graphics Part1 Welcome", " Data visualization with R and ggplot2: from data to publication-quality graphics Sarah Bonnin 2023-09-21 Part1 Welcome Dates, time &amp; location Dates: First edition: September 27-28 Second edition: October 18-19 Time: 9:30-13:30 Location: IDIBAPS Instructor Sarah Bonnin Bioinformatics consultant at Clarivate. Prerequisites The workshop is open to anyone with no (or little) prior programming experience. Attendees must however feel comfortable enough with their own computer to install programs (and debug their installation, when needed) and locate folders and files. Learning objectives Attendees will: Gain a high-level understanding of data import, manipulation and graphing with R and RStudio. Be able to produce and save a variety of publication-quality graphs (among others: boxplots, histograms, dot plots, heatmaps). Learning outcomes Identify and use RStudio panels (console, scripts, folders and files panels). Locate useful resources to learn more and know where to seek help. Import data from files into R. Manipulate and prepare (filter, select) data. Produce graphs: Create a plot from “recipes”. Change basic parameters (color, font size, point shape, title, etc.). Export high-quality graphs in different formats (pdf, jpeg, png). What this workshop is NOT: A programming class. A solution to all data visualization problems. What this workshop (hopefully) is: An introduction to data visualization. An introduction to R and to R Studio softwarea. A teaser to make you want to learn how to program in R! Agenda Note that the agenda may be adjusted depending on the pace of the students. Day 1: 9:30-10:00 (30’): course introduction + check the set up. 10:00-10:45 (45’): introduction to R and Rstudio (Posit). 10:45-11:30 (45’): import data / read files. 11:30-12:00 (30’): break 12:00-12:30 (30’): ggplot2: concept and structure. 12:30-13:00 (30’:) guided boxplots, scatter plots, barplots, pie plots. 13:00-13:30 (30’): exercises / changing graph parameters. Day 2: 9:30-10:00 (30’): recall what was done on day 1 with a “warm up” exercise. 10:00-10:45 (45’): introduction to simple data wrangling to filter and select data. 10:45-11:30 (45’): exercises with filtering + graphs. 11:30-12:00 (30’): break. 12:00-12:30 (30’): introduction to interactive plotting with plotly. 12:30-13:15 (45’): exercises combining what we learned so far. 13:15-13:30 (15’): workshop wrap up. "],["setup.html", "Part2 Setup ", " Part2 Setup "],["install-r-and-rstudioposit.html", "2.1 Install R and RStudio/Posit", " 2.1 Install R and RStudio/Posit Follow the instructions and relevant links on the Posit/RStudio website to install both R and RStudio Desktop: Installation instructions depend on the operating system installed on your computer. The next table provides a summary of links to follow, depending on the operating system: Opereating system R RStudio desktop Windows https://cran.rstudio.com/bin/windows/ Windows 10/11 macOS https://cran.rstudio.com/bin/macosx/ macOS 11+ Linux (Debian) https://cran.rstudio.com/bin/linux/debian Ubuntu 20 / Debian 11 Linux (Ubuntu) https://cran.rstudio.com/bin/linux/ubuntu Ubuntu 20 / Debian 11, Ubuntu 22 Linux (Fedora / Redhat) https://cran.rstudio.com/bin/linux/fedora Fedora 19 / Red Hat 7, Fedora 34 / Red Hat 8, Fedora 36 / Red Hat 9 If you are using a Linux OS, you will need to install additional packages: Debian, Ubuntu (DEB packages): libcurl4-openssl-dev libssl-dev libxml2-dev libfontconfig1-dev libharfbuzz-dev libfribidi-dev libfreetype6-dev libpng-dev libtiff5-dev libjpeg-dev Fedora, CentOS, RHEL (RPM packages): libxml2-devel libcurl-devel fontconfig-devel openssl-devel libjpeg-devel libtiff-devel libpng-devel Guides for Linux package installation (you may need to contact your IT department for permissions): • Install a DEB package • Install an RPM package "],["install-r-packages.html", "2.2 Install R packages", " 2.2 Install R packages Once R and RStudio are successfully installed, Open RStudio: In the bottom-right panel, click on tab “Packages” and then “Install” . In the “Packages” box, write “tidyverse” and click “Install”. It should look like the below image: The installation of this first package will take several minutes. Repeat the process for the following packages: ggrepel pheatmap VennDiagram openxlsx Note: install packages one by one, as it eases debugging in case of installation failure. If installation of the first package (tidyverse) repeatedly fails, try and install the following packages independently: tidyr dplyr ggplot2 stringr "],["check-setup.html", "2.3 Check setup", " 2.3 Check setup In order to make sure that the setup is successful, click again on tab “Packages” of the bottom-right panel, and tick packages that you just installed, like the “tidyverse package in that example: If no error (in red) appear in the console (bottom-left panel), installation should be ok. CHECK Copy-paste the following line of code in the console (bottom-left panel) and click on Enter / Return. You should be able to see the scatter plot appear on the “Plots” tab in the bottom-right panel ! diamonds %&gt;% dplyr::select(carat, price, clarity) %&gt;% ggplot(aes(x=carat, y=price, col=clarity)) + geom_point() "],["r.html", "Part3 R", " Part3 R "],["what-is-r.html", "3.1 What is R ?", " 3.1 What is R ? Programming language and environment for data manipulation, statistical computing, and graphical display. Implementation of the S programming language Created at the University of Auckland, New Zealand: Initial version released in 1995 Stable version released in 2000 Free and open source ! https://www.r-project.org/ Interactive, flexible Very active community of developers and users! Many resources and forums available "],["functions-packages.html", "3.2 Functions &amp; packages", " 3.2 Functions &amp; packages 3.2.1 Functions A function in R is a piece of code that takes an input and/or some parameters, processes some calculation, and gives the user some output. For example: the mean() function would take a vector / series of numbers as an input, calculate and output their average. Functions can take arguments/parameters. In the example above, the argument to mean() would be a series of numbers. In R code, you can recognize functions because of the parenthesis (“round brackets”) after the name of the function. 3.2.2 Packages 3.2.2.1 What are packages? A package in R stores, in standardized format, a set of functions, data and documentation. They are developed and shared by the community, and vary in size and complexity. Packages are stored in a library. source Packages are usually found in public repositories such as: CRAN (general repository for any type of data analysis). Bioconductor (initially specialized in high throughput data analysis / bioinformatics) Packages can also be created and stored locally by the programmer. 3.2.2.2 The “tidyverse” The tidyverse is an opinionated collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures. source Why do we use the tidyverse packages in this course? Easier to understand / more intuitive vocabulary. Uniform in style and logic across data manipulation and visualization. In this course, we will use in particular, and in that order: {readr} for importing / exporting files. {ggplot2} for data visualization. {tidyr} and {dplyr} for (simple) data manipulation and selection. "],["what-is-rstudio-posit.html", "Part4 What is RStudio (Posit)?", " Part4 What is RStudio (Posit)? Free and open source IDE (Integrated Development Environment) for R Available for Windows, Mac OS and LINUX "],["rstudio-interface.html", "4.1 RStudio interface", " 4.1 RStudio interface 4 panels: top-left: scripts and files bottom-left: R console Linux-line terminal / command-line top-right: environment, history, connections, tutorial bottom-right: tree of folders and files, plots/graphs window, packages, help window, viewer, presentation "],["the-r-console.html", "4.2 The R console", " 4.2 The R console The R console (bottom-left panel) is where the magic happens! It is where the user/programmer/you will interact with R. Let’s give it a try. Type (or copy-paste) the following in the console, and hit the Enter/Return key: getwd() getwd() is a function. Reminder: you can detect functions because they use parenthesis/round brackets. Upon clicking Enter/Return, you are asking the R kernel to execute the function. What R returns is the response/result, after computing the content of the code. The getwd() function provides your current working directory. Let’s try to interact a bit more with the console: copy-paste the following, and hit Enter/Return: 7*3 R gives you the results of this simple multiplication. "],["paths-and-directories.html", "Part5 Paths and directories ", " Part5 Paths and directories "],["path-and-home-directory.html", "5.1 Path and home directory", " 5.1 Path and home directory The path of a file/directory is its location/address in the file system. Your home directory is the one that hosts the user (you) data: it should be similar to all operating system, for example: /users/sbonnin (Linux) /Users/sbonnin (macOS) C:\\Users\\sbonnin (Windows) Starting “/” or “\\” is called the root directory. Directories branch downwards from the root directory, and can contain both files and subdirectories. In the examples above, sbonnin is a subdirectory of users (or Users). Example of a tree / organization of directories: "],["create-course-directory.html", "5.2 Create course directory", " 5.2 Create course directory . Go to the Files tab in the bottom-right corner: you can navigate through the tree of files and directories by double clicking one folder name, to enter it, and by clicking on the double dot “..” to go back. Choose the folder under which you would like to save the workshop’s work. For example, you can create a new folder under Home -&gt; Documents. Click on “Home” and then on “Documents”: Create a folder called “DataViz_2023” by clicking on the “+Folder” icon. You should now see a new folder: Double-click on the newly created “DataViz_2023” folder, still under the “Files” tab. Click on the “More file commands button”: Click on “Set As Working Directory”: The working directory is where R will, by default, find files to read, and that is where it will also save files and figures, if not specified otherwise. "],["r-basics.html", "Part6 R basics ", " Part6 R basics "],["arithmetic-operators.html", "6.1 Arithmetic operators", " 6.1 Arithmetic operators Operator Function + addition - subtraction / division * multiplication ^ or ** exponential In the R terminal, as you have seen before, you can type the following: 10 - 2 ## [1] 8 And hit Enter for R to interpret the command, and give you the output. "],["objects-in-r.html", "6.2 Objects in R", " 6.2 Objects in R Everything that stores any kind of data in R is an object: "],["assignment-operators.html", "6.3 Assignment operators", " 6.3 Assignment operators &lt;- or = Essentially the same but, to avoid confusions: Use &lt;- for assignments Keep = for functions arguments "],["assigning-data-to-an-object.html", "6.4 Assigning data to an object", " 6.4 Assigning data to an object Assigning a value to the object named B: Copy-paste the following in the console, and hit Enter. B &lt;- 10 Reassigning: modifying the content of an object: B + 10 B unchanged !! B &lt;- B + 10 B changed !! You can see the objects you created in the upper right panel in RStudio that is, the environment. "],["import-data-read-files.html", "Part7 Import data / read files", " Part7 Import data / read files We will learn how to read a file in R using the {readr} package (part of the {tidyverse}, that was previously installed). First, let’s copy locally a few files that we will need for this workshop. Please go to: “” And copy this archive in the course directory Data taken from: https://ajuntament.barcelona.cat/estadistica/castella/Estadistiques_per_temes/Poblacio_i_demografia/Documents_relacionats/pobest/a2023/part1/index.htm test &lt;- readr::read_csv(&quot;stats_countries_barcelona_2013-2023.csv&quot;) ## Rows: 185 Columns: 13 ## ── Column specification ──────────────────────────────────────────────────────────────────────────────────── ## Delimiter: &quot;,&quot; ## chr (2): Country, Continent ## dbl (11): 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023 ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. # long format test_long &lt;- tidyr::pivot_longer(test, cols=-c(Country, Continent), names_to=&quot;Year&quot;, values_to=&quot;Count&quot;) test_sub &lt;- test_long %&gt;% filter(Country %in% c(&quot;Francia&quot;, &quot;Italia&quot;, &quot;Alemania&quot;)) ggplot(test_sub, aes(x=Year, y=Count, color=Continent)) + geom_line() ggplot(test_sub, aes(x=Year, y=Count, fill=Country)) + geom_bar(stat=&quot;identity&quot;) ggplot(test_sub, aes(x=Year, y=Count, fill=Country)) + geom_bar(stat=&quot;identity&quot;, position=&quot;dodge&quot;) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
