[["index.html", "Data visualization with R and ggplot2: from data to publication-quality graphics Part1 Welcome", " Data visualization with R and ggplot2: from data to publication-quality graphics Sarah Bonnin 2023-09-24 Part1 Welcome Dates, time &amp; location Dates: First edition: September 27-28 Second edition: October 18-19 Time: 9:30-13:30 Location: IDIBAPS Instructor Sarah Bonnin Bioinformatics consultant at Clarivate. Prerequisites The workshop is open to anyone with no (or little) prior programming experience. Attendees must however feel comfortable enough with their own computer to install programs (and debug their installation, when needed) and locate folders and files. Learning objectives Attendees will: Gain a high-level understanding of data import, manipulation and graphing with R and RStudio. Be able to produce and save a variety of publication-quality graphs (among others: boxplots, histograms, dot plots, heatmaps). Learning outcomes Identify and use RStudio panels (console, scripts, folders and files panels). Locate useful resources to learn more and know where to seek help. Import data from files into R. Manipulate and prepare (filter, select) data. Produce graphs: Create a plot from “recipes”. Change basic parameters (color, font size, point shape, title, etc.). Export high-quality graphs in different formats (pdf, jpeg, png). What this workshop is NOT: A programming class. A data visualization class. What this workshop (hopefully) is: An introduction to data visualization. An introduction to R and to RStudio softwares. A teaser to - hopefully - make you want to learn how to program in R! Agenda Note that the agenda may be adjusted depending on the pace of the group Day 1: 9:30-10:00 (30’): course introduction + check the set up. 10:00-10:45 (30’): introduction to R and Rstudio (Posit). 10:45-11:30 (60’): paths and directories, R basics, import data / read files. 11:30-12:00 (30’): break 12:00-13:00 (60’): ggplot2: concept, structure, scatter plots, boxplots, barplots. 13:00-13:30 (30’): exercises / changing graph parameters. Day 2: 9:30-10:00 (30’): recall what was done on day 1 with a “warm up” exercise. 10:00-10:45 (45’): introduction to simple data wrangling to filter and select data. 10:45-11:30 (45’): exercises with filtering + graphs. 11:30-12:00 (30’): break. 12:00-12:30 (30’): introduction to interactive plotting with plotly. 12:30-13:15 (45’): exercises combining what we learned so far. 13:15-13:30 (15’): workshop wrap up. "],["setup.html", "Part2 Setup ", " Part2 Setup "],["install-r-and-rstudioposit.html", "2.1 Install R and RStudio/Posit", " 2.1 Install R and RStudio/Posit Follow the instructions and relevant links on the Posit/RStudio website to install both R and RStudio Desktop: Installation instructions depend on the operating system installed on your computer. The next table provides a summary of links to follow, depending on the operating system: Opereating system R RStudio desktop Windows https://cran.rstudio.com/bin/windows/ Windows 10/11 macOS https://cran.rstudio.com/bin/macosx/ macOS 11+ Linux (Debian) https://cran.rstudio.com/bin/linux/debian Ubuntu 20 / Debian 11 Linux (Ubuntu) https://cran.rstudio.com/bin/linux/ubuntu Ubuntu 20 / Debian 11, Ubuntu 22 Linux (Fedora / Redhat) https://cran.rstudio.com/bin/linux/fedora Fedora 19 / Red Hat 7, Fedora 34 / Red Hat 8, Fedora 36 / Red Hat 9 If you are using a Linux OS, you will need to install additional packages: Debian, Ubuntu (DEB packages): libcurl4-openssl-dev libssl-dev libxml2-dev libfontconfig1-dev libharfbuzz-dev libfribidi-dev libfreetype6-dev libpng-dev libtiff5-dev libjpeg-dev Fedora, CentOS, RHEL (RPM packages): libxml2-devel libcurl-devel fontconfig-devel openssl-devel libjpeg-devel libtiff-devel libpng-devel Guides for Linux package installation (you may need to contact your IT department for permissions): Install a DEB package Install an RPM package "],["install-r-packages.html", "2.2 Install R packages", " 2.2 Install R packages Once R and RStudio are successfully installed, Open RStudio: In the bottom-right panel, click on tab “Packages” and then “Install” . In the “Packages” box, write “tidyverse” and click “Install”. It should look like the below image: The installation of this first package will take several minutes. Repeat the process for the following packages: ggrepel pheatmap VennDiagram openxlsx Note: install packages one by one, as it eases debugging in case of installation failure. If installation of the first package (tidyverse) repeatedly fails, try and install the following packages independently: tidyr dplyr ggplot2 stringr "],["check-setup.html", "2.3 Check setup", " 2.3 Check setup In order to make sure that the setup is successful, click again on tab “Packages” of the bottom-right panel, and tick packages that you just installed, like the “tidyverse” package in that example: If no error (in red) appear in the console (bottom-left panel), installation should be ok. CHECK Copy-paste the following line of code in the console (bottom-left panel) and click on Enter / Return. You should be able to see the scatter plot appear on the “Plots” tab in the bottom-right panel ! diamonds %&gt;% dplyr::select(carat, price, clarity) %&gt;% ggplot(aes(x=carat, y=price, col=clarity)) + geom_point() "],["r.html", "Part3 R", " Part3 R "],["what-is-r.html", "3.1 What is R ?", " 3.1 What is R ? Programming language and environment for data manipulation, statistical computing, and graphical display. Implementation of the S programming language Created at the University of Auckland, New Zealand: Initial version released in 1995 Stable version released in 2000 Free and open source ! https://www.r-project.org/ Interactive, flexible Very active community of developers and users! Many resources and forums available "],["functions-packages.html", "3.2 Functions &amp; packages", " 3.2 Functions &amp; packages 3.2.1 Functions A function in R is a piece of code that takes an input and/or some parameters, processes some calculation, and gives the user some output. For example: the mean() function would take a vector / series of numbers as an input, calculate and output their average. Functions can take arguments/parameters. In the example above, the argument to mean() would be a series of numbers. In R code, you can recognize functions because of the parenthesis (“round brackets”) after the name of the function. 3.2.2 Packages 3.2.2.1 What are packages? A package in R stores, in standardized format, a set of functions, data and documentation. They are developed and shared by the community, and vary in size and complexity. Packages are stored in a library. source Packages are usually found in public repositories such as: CRAN (general repository for any type of data analysis). Bioconductor (initially specialized in high throughput data analysis / bioinformatics) Anyone can create a package and stored it locally; creating packages is a great way to share code. 3.2.2.2 The “tidyverse” The tidyverse is an opinionated collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures. source Why do we use the tidyverse packages in this course? Easier to understand / more intuitive vocabulary. Uniform in style and logic across data manipulation and visualization. In this course, we will use in particular, and in that order: {readr} for importing / exporting files. {ggplot2} for data visualization. {dplyr} for (simple) data manipulation and selection. "],["what-is-rstudio-posit.html", "Part4 What is RStudio (Posit)?", " Part4 What is RStudio (Posit)? Free and open source IDE (Integrated Development Environment) for R Available for Windows, Mac OS and LINUX "],["rstudio-interface.html", "4.1 RStudio interface", " 4.1 RStudio interface 4 panels: top-left: scripts and files bottom-left: R console Linux-line terminal / command-line top-right: environment, history, connections, tutorial bottom-right: tree of folders and files, plots/graphs window, packages, help window, viewer, presentation "],["the-r-console.html", "4.2 The R console", " 4.2 The R console The R console (bottom-left panel) is where the magic happens! It is where the user/programmer/you will interact with R. Let’s give it a try. Type (or copy-paste) the following in the console (bottom-left panel), and hit the Enter/Return key: getwd() getwd() is a function. Remember that functions are followed by parenthesis/round brackets. Upon clicking Enter/Return, you are asking the R kernel to execute the function. What R returns is the response/result after executing the function. The getwd() function retrieves and outputs your current working directory. Let’s try to interact a bit more with the console: copy-paste the following, and hit Enter/Return: 7*3 R gives you the results of this simple multiplication. USEFUL TIP In the console, press the up arrow key : this goes back to the previous commands/lines you wrote and sent in the console. "],["paths-and-directories.html", "Part5 Paths and directories ", " Part5 Paths and directories "],["path-and-home-directory.html", "5.1 Path and home directory", " 5.1 Path and home directory The path of a file/directory is its location/address in the file system. Your home directory is the one that hosts the user (your) data: it is similar, although not identical, in all operating systems, for example: /users/sbonnin (Linux) /Users/sbonnin (macOS) C:\\Users\\sbonnin (Windows) The starting “/” or “\\” is called the root directory. Directories branch downwards from the root directory, and can contain both files and subdirectories. In the examples above, sbonnin is a subdirectory of users (or Users), and users starts at the root. Example of a tree / organization of directories: "],["create-course-directory.html", "5.2 Create course directory", " 5.2 Create course directory Go to the Files tab in the bottom-right corner: you can navigate through the tree of files and directories by double clicking one folder name, to enter it, and by clicking on the double dot “..” to go back. Choose the folder under which you would like to save the workshop’s work. For example, you can create a new folder under Home -&gt; Documents. Click on “Home” and then on “Documents”: Create a folder called “DataViz_2023” by clicking on the “+Folder” icon. You should now see a new folder: Double-click on the newly created “DataViz_2023” folder, still under the “Files” tab. Click on the “More file commands button”: Click on “Set As Working Directory”: The working directory is where R will, by default, find files to read, and that is where it will also save files and figures, if another location/path is not specified. "],["r-basics.html", "Part6 R basics", " Part6 R basics In this section, we will cover very basic notions of R programming. "],["arithmetic-operators.html", "6.1 Arithmetic operators", " 6.1 Arithmetic operators R is a programming language with a statistics focus. While it can be used for very complex tasks, it can also be used as a simple calculator, as shown previously. The following arithmetic operators can be used for these tasks: Operator Function + addition - subtraction / division * multiplication ^ or ** exponential In the R terminal, as you have seen before, you can type the following: 10-2 ## [1] 8 And hit Enter for R to interpret the command, and give you the output. Then try the following: 3*5 or: (4*12)/5 "],["objects-in-r.html", "6.2 Objects in R", " 6.2 Objects in R So far, we used the R console interactively, and received the answers from R in the console. Data/output of commands can also be stored in object. Everything that stores any kind of data in R is an object: When data is stored in objects, it can easily be reused. "],["assigning-data-to-an-object.html", "6.3 Assigning data to an object", " 6.3 Assigning data to an object We will use an assignment operator to assign (i.e. store) data to an object: You can use either &lt;- or = (essentially the same). Examples: Assigning/storing 10 to the object named B: Copy-paste the following in the console, and hit Enter. B &lt;- 10 This time, there is no output. If you now type B in the R console, and hit Enter, what happens? Reassigning: modifying the content of an object: B &lt;- 12 You can also use an object to assign data to a new (or to the same) object: try the following in the console: B &lt;- 12 A &lt;- 5 A &lt;- A + B What values do A and B store? You can see the objects you created in the upper right panel in RStudio that is, the environment: How to name an object? Naming an object in R is quite flexible. You can use: letters (note that object names case sensitive: A and a are NOT the same) numbers (although the object name cannot start with a number) underscores _ What you CANNOT use: Spaces Most special characters "],["data-types.html", "6.4 Data types", " 6.4 Data types There are several data types in R: numbers, characters, booleans, factors, etc. For this introduction, we will mainly see and use numbers and characters. A character or string of characters must be assigned with quotes (““), for example: myobject &lt;- &quot;training&quot; You should now see in the environment (upper-right corner) the new object called training. Now try to assign the same object without the quotes: myobject &lt;- training What happens? "],["import-data-read-files-scripts.html", "Part7 Import data / read files / scripts", " Part7 Import data / read files / scripts We will learn how to import the content of a file in R using the {readr} package (part of the {tidyverse}, that was previously installed). "],["fetch-workshop-files.html", "7.1 Fetch workshop files", " 7.1 Fetch workshop files First, let’s copy locally a few files that were prepared for this workshop. Please go to: https://github.com/sarahbonnin/DataViz_source_files And download the ZIP archive, as follows: Click on -&gt; Download ZIP: Save the archive in the course folder previously created (DataViz_2023) and extract it (click right on the archive and you should see some extraction options). What is extracted from the archive is the DataViz_source_files-main folder, which in turns contains a files folder: this contains the files we need for the course. The path to fetch the files is the following (remember that the first piece is OS/user dependent): /your_home_directory/DataViz_2023/DataViz_source_files-main/files e.g. /users/sbonnin/DataViz_2023/DataViz_source_files-main/files "],["import-read-in-data.html", "7.2 Import / read in data", " 7.2 Import / read in data Let’s now import the content of a first file in our environment: geneexp &lt;- read_csv(&quot;DataViz_source_files-main/files/expression_20genes.csv&quot;) Because your working directory is /your_home_directory/DataViz_2023/, R can find the DataViz_source_files-main without the need to know the whole path: this is a relative path as opposed to na absolute path. The content of file expression_20genes.csv is now stored in the object named geneexp. The function also outputs some information about the data you are importing: Such as that: The data contains 20 rows (observations), and 4 columns (variables). Out of these 4 columns: 2 contain characters (chr): Gene and DE. 2 contain numbers (dbl for “double”): sample1 and sample2 Remember that you can find the objects that you create in the Environment tab in the upper-right panel. Note that if you click on an object name in the Environment tab, it will open on the upper-left panel. Let’s try with geneexp: "],["scripts.html", "7.3 Scripts", " 7.3 Scripts A script is a text file containing a set of commands and comments. It can be saved and re-used later or be refered to. It is good practice to create a script and save all commands: let’s create a script for this course. Go to File -&gt; New File -&gt; R script A new window will open in the upper-left panel. Now save the file in the course folder. Save all commands you will use during the course, and save changes regularly! "],["ggplot2.html", "Part8 ggplot2", " Part8 ggplot2 Graphing package inspired by the Grammar of Graphics work of Leland Wilkinson. Allows to compose graphs by combining independent components / blocks / layers. Flexible, highly customizable. Well documented. image from https://www.cedricscherer.com/img/ggplot-tutorial/overview.png "],["getting-started.html", "8.1 Getting started", " 8.1 Getting started A ggplot graph needs at least 3 components: Data: that is the source data table that we want to represent. Aesthetics mappings: they describe what will be visualized from data Geometrics: functions that represent what we see in the graph: lines, points, boxes etc. for example: geom_point() geom_lines() geom_histogram() geom_boxplot() geom_bar() geom_smooth() geom_tiles() The base structure is the following: ggplot(, ) + For example if we want to represent column1 (on the x axis) and column2 (on the y axis) of data as **points, we would use the following structure: ggplot(data=dataframe, mapping=aes(x=column1, y=column2)) + geom_point() This will be our template as we explore different types of graphs. We can add more layers to this base structure to customize the plot further, as we will see in the next examples. "],["scatter-plot.html", "8.2 Scatter plot", " 8.2 Scatter plot 8.2.1 Base plot We can start from the geneexp object, that holds the content of file expression_20genes.csv: we want to plot sample1 on the x axis and sample2 on the y axis. The base layer will be the following: ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2)) Adding to this the geometrics called geom_point(), we tell ggplot to produce a scatter/point plot: # This line is a comment: a comment is not interpreted by R. # Example of a scatter plot: add the geom_point() layer ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2)) + geom_point() # Note that the new line is not necessary after the &quot;+&quot;: it is done for readibility. Please, copy the code above in your script! Your plot should appear in the “Plots” tab in the bottom-right panel. 8.2.2 Customize the points geom_point() also takes some parameters, including the color of the point, and their size: Color all points in red: ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2)) + geom_point(color=&quot;red&quot;) Make points larger (size default is 1.5): ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2)) + geom_point(color=&quot;red&quot;, size=2.5) This is a good place to introduce the help pages of functions! Functions in ggplot2 (and tidyverse in general) are richly documented. While documentation can be quite technical it is always good practice to take a look at it. You can access the help page of a function in the Help tab in the bottom-right panel. Give it a try with the “geom_point”: Back to our customization: you can set different shapes for the points! This is done by setting the shape parameter in geom_point(). For example, triangles: ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2)) + geom_point(color=&quot;red&quot;, size=2.5, shape=&quot;triangle&quot;) Image from ggplot2 documentation 8.2.3 Add more layers We can add more layers to the plot, using the same structure! 8.2.3.1 ggtitle() For example, let’s add a title using the ggtitle() layer: ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2)) + geom_point(color=&quot;red&quot;, size=2.5, shape=&quot;diamond&quot;) + ggtitle(label=&quot;my first ggplot&quot;) label is a parameter of ggtitle() function. 8.2.3.2 Background Not a big fan of the grey background? This is the default “theme”, but there are more options. For example: ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2)) + geom_point(color=&quot;red&quot;, size=2.5, shape=&quot;diamond&quot;) + ggtitle(label=&quot;my first ggplot&quot;) + theme_linedraw() A good page to check the different backgrounds: https://ggplot2-book.org/themes#sec-theme 8.2.3.3 Regression line Add a regression line with geom_smooth(). A smoothed line can help highlight the dominant pattern/trend. ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2)) + geom_point(color=&quot;red&quot;, size=2.5, shape=&quot;diamond&quot;) + ggtitle(label=&quot;my first ggplot&quot;) + theme_linedraw() + geom_smooth() "],["save-your-plot.html", "8.3 Save your plot", " 8.3 Save your plot Before we dive into more graph types, we we learn how to easily save the current plot. In the “Plots” tab, click on “Export” and “Save as image”: From that windows, you can: Pick an image format between: PNG, JPEG, TIFF, BMP, SVG, EPS. Choose where you want to save the output file Choose the file name. Set the dimensions, by either: Setting the Width and Height of the figure (in pixels) Moving the graph manually (bottom-right corner of the plot) until you obtain the size and proportions that you want. "],["exercise-1.html", "8.4 Exercise 1", " 8.4 Exercise 1 Time for our first exercise! Starting from the same object geneexp: Create a scatter plot that shows sample2 on the x-axis and sample1 on the y-axis. correction ggplot(data=geneexp, mapping=aes(x=sample2, y=sample1)) + geom_point() 2. Change the point color to blue, and the point size to 2. correction ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2)) + geom_point(color=&quot;blue&quot;, size=2) 3. Change the point shape to “square cross” correction ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2)) + geom_point(color=&quot;blue&quot;, size=2, shape=&quot;square cross&quot;) 4. Add the title of your choice. correction ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2)) + geom_point(color=&quot;blue&quot;, size=2, shape=&quot;square cross&quot;) + ggtitle(label=&quot;my second ggplot&quot;) 5. Add a subtitle (wait: that’s new! Google check ggtitle help page and/or “ggtitle subtitle” and see if you can find out!) correction ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2)) + geom_point(color=&quot;blue&quot;, size=2, shape=&quot;square cross&quot;) + ggtitle(label=&quot;my second ggplot&quot;, subtitle=&quot;nice blue squares&quot;) 6. Save your plot as a JPEG file, in the course folder, with dimensions 600X600. correction Bottom-right panel -&gt; Plots tab -&gt; Export -&gt; … "],["scatter-plots-more-features.html", "8.5 Scatter plots: more features", " 8.5 Scatter plots: more features Let’s customize our scatter plot a bit more. We may want to show the gene names that the points represent. This is done by setting the label parameter, in the ggplot aes() function, and by adding the geom_text() layer: ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2, label=Gene)) + geom_point() + geom_text() Not bad, but let’s adjust the location of the labels, so they do not overlap with the points. We can set the nudge_x parameter, to move the labels horizontally (on the x axis). ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2, label=Gene)) + geom_point() + geom_text(nudge_x=1.5) We can also decrease or increase the label size: ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2, label=Gene)) + geom_point() + geom_text(nudge_x=1.5, size=3) Last but not least: point color and shape can be dependent on another column / variable of the data. Columns to conditionally color or shape the points should be specified inside the aes() function. For shape: ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2, label=Gene, shape=DE)) + geom_point() + geom_text(nudge_x=1.2, size=3) For color: ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2, label=Gene, color=DE)) + geom_point() + geom_text(nudge_x=1.2, size=3) More advanced (as reference, or if someone asks): how to change default colors: Colors can be set manually using (yet another) layer: scale_color_manual(). ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2, label=Gene, color=DE)) + geom_point() + geom_text(nudge_x=1.2, size=3) + scale_color_manual(values=c(&quot;blue&quot;, &quot;black&quot;, &quot;red&quot;)) "],["barplots.html", "8.6 Barplots", " 8.6 Barplots A barplot (or barchart) is a graph that represents categorical data with rectangular bars, which heights are proportional to the values they represent. The first layer of the ggplot() function will be similar. However, note that we start with only the x= parameter set in aes() function (this is the basic way to plot a barplot): ggplot(data=dataframe, mapping=aes(x=column1)) + geom_bar() Using our previous geneexp data, we can produce a bar plot out of the DE column, such as: ggplot(geneexp, aes(x=DE)) + geom_bar() This produces a barplots containing 3 bars: Down, No and Up: their height represents the number of genes found in each category. "],["exercise-2.html", "8.7 Exercise 2", " 8.7 Exercise 2 Import file DataViz_source_files-main/files/gencode.v44.annotation.csv in R, into an object called gtf. correction gtf &lt;- read_csv(&quot;DataViz_source_files-main/files/gencode.v44.annotation.csv&quot;) This is a small subset of the gencode v44 human gene annotation: Only protein coding, long non-coding, miRNAs, snRNAs and snoRNAs Limited to chromosomes 1 to 10 Random subset of 1000 genes Converted to a friendly csv format. 2. Create a simple barplot representing the count of genes per chromosome: correction ggplot(data=gtf, mapping=aes(x=chr)) + geom_bar() 3. Keeping the chromosome on the x axis, split the barplot per gene type. TIP: remember how we set color= in mapping=aes() function in the scatter plot section? Give it a try here! correction ggplot(data=gtf, mapping=aes(x=chr, color=gene_type)) + geom_bar() 4. Now try with fill instead of color: correction ggplot(data=gtf, mapping=aes(x=chr, fill=gene_type)) + geom_bar() 5. Add a title to the graph: correction ggplot(data=gtf, mapping=aes(x=chr, fill=gene_type)) + geom_bar(position=&quot;dodge&quot;) + ggtitle(label = &quot;Number of genes per chromosome, split by gene type&quot;) 6. Change the theme: correction ggplot(data=gtf, mapping=aes(x=chr, fill=gene_type)) + geom_bar(position=&quot;dodge&quot;) + ggtitle(label = &quot;Number of genes per chromosome, split by gene type&quot;) + theme_bw() 7. Save the graph in PNG format in the course’s directory. "],["barplots-bars-position.html", "8.8 Barplots: bars position", " 8.8 Barplots: bars position We can also play with the position of the bars. By default, position is stack, i.e. categories are stacked on top of each other along the bar. Position fill will show the proportions, instead of the absolute values, of each category: ggplot(data=gtf, mapping=aes(x=chr, fill=gene_type)) + geom_bar(position=&quot;fill&quot;) Position dodge is representing each category (here, continents), next to each other: ggplot(data=gtf, mapping=aes(x=chr, fill=gene_type)) + geom_bar(position=&quot;dodge&quot;) More advanced (as reference, or if someone asks): how to reorder x-axis labels: Factors are a data type in R: they are used to represent categorical data. Using factors requires a bit more understanding of R works/thinks, but here is an application: ggplot(data=gtf, mapping=aes(x=factor(chr, levels=c(&quot;chr1&quot;, &quot;chr2&quot;, &quot;chr3&quot;, &quot;chr4&quot;, &quot;chr5&quot;, &quot;chr6&quot;, &quot;chr7&quot;, &quot;chr8&quot;, &quot;chr9&quot;, &quot;chr10&quot;), ordered=TRUE), fill=gene_type)) + geom_bar(position=&quot;dodge&quot;) + xlab(&quot;chromosome&quot;) 8.8.1 stats=“identity” parameter geom_bar() can work a bit differently, when facing numbers instead of categories. Let’s import data from file: DataViz_source_files-main/files/stats_continents_barcelona_2013-2023_long.csv into an object called statsbcn. The data contains the number of foreign residents in Barcelona from 2013 to 2023. statsbcn &lt;- read_csv(&quot;DataViz_source_files-main/files/stats_continents_barcelona_2013-2023_long.csv&quot;) How many rows and how many columns does the data contain? In the barplots we created so far, R takes categories in the columns specified x= and counts the number of occurrences. The argument stat=“identity” in geom_bar() is telling R to calculate the sum of the variable specified in y=, grouped by the x variable: bars of the barplot will display the sums. In the following example, we are plotting the sum of foreign residents in Barcelona (Population provided in y) per year (Year provided in x): ggplot(statsbcn, aes(x=Year, y=Population)) + geom_bar(stat=&quot;identity&quot;) Here, we can provide Continent to fill: ggplot(statsbcn, aes(x=Year, y=Population, fill=Continent)) + geom_bar(stat=&quot;identity&quot;) We can here again play with the position. Position fill : ggplot(statsbcn, aes(x=Year, y=Population, fill=Continent)) + geom_bar(stat=&quot;identity&quot;, position=&quot;fill&quot;) Position dodge : ggplot(statsbcn, aes(x=Year, y=Population, fill=Continent)) + geom_bar(stat=&quot;identity&quot;, position=&quot;dodge&quot;) More advanced (as reference, or if someone asks): display all labels: Convert “Year” column as character, instead of numbers: ggplot(statsbcn, aes(x=as.character(Year), y=Population, fill=Continent)) + geom_bar(stat=&quot;identity&quot;, position=&quot;dodge&quot;) "],["boxplots.html", "8.9 Boxplots", " 8.9 Boxplots A boxplot is used to visualize the distribution of data. Source We can import data from a file that contains the same information as geneexp but in a slightly different format: geneexp2 &lt;- read_csv(&quot;DataViz_source_files-main/files/expression_20genes_long.csv&quot;) In our first boxplot, one box corresponds to one sample: ggplot(geneexp2, aes(x=sample, y=expression)) + geom_boxplot() The same way we did for barplots, we can split boxes by DE: ggplot(geneexp2, aes(x=sample, y=expression, fill=DE)) + geom_boxplot() If you prefer a violin plot, it is easy: ggplot(geneexp2, aes(x=sample, y=expression, fill=DE)) + geom_violin() Violin plots also aim to visualize data distribution. While boxplots can only show summary statistics / quantiles, violin plots also show the density of each variable. "],["fine-tuning-text.html", "8.10 Fine-tuning text", " 8.10 Fine-tuning text Being able to change font size (axis text, title, legend, etc.) in your graph can be very important for readability. Changing text size in ggplot2 graphs should be done using the theme() package, that unfortunately utilizes a difficult structure. We will illustrate some font size modifications on our very first scatter plot. Change overall font size: ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2)) + geom_point() + ggtitle(&quot;scatter plot&quot;) + theme(text = element_text(size = 20)) Change font size of axis text: ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2)) + geom_point() + ggtitle(&quot;scatter plot&quot;) + theme(axis.text = element_text(size = 20)) Change font size of axis titles: ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2)) + geom_point() + ggtitle(&quot;scatter plot&quot;) + theme(axis.title = element_text(size = 20)) Change font size of the main title: ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2)) + geom_point() + ggtitle(&quot;scatter plot&quot;) + theme(plot.title = element_text(size = 20)) If you want to learn more, you can check this complete guide on how to modify the ggplot2 theme. "],["colors.html", "8.11 Colors", " 8.11 Colors Colors can be set a different way in ggplot2, and in R in general. The easiest way is to fetch the colors by their names. There are 657 color names available for you to pick! You can check them by pasting the following in the console: colors() ggplot2 provides a color scale by default. Mainy different palettes are available to change the default scale. You can easily pick palettes from the RColorBrewer package, that is included in ggplot2. Available palettes are shown below: We can easily take advantage of the RColorBrewer’s palettes by using either scale_color_brewer() or scale_fill_brewer() layers (depending if color or fill was set in aes(), respectively): ggplot(data=gtf, mapping=aes(x=chr, fill=gene_type)) + geom_bar(position=&quot;dodge&quot;) + scale_fill_brewer() The default palette used is the “Blues” palette. How does that look using “Dark2” palette? ggplot(data=gtf, mapping=aes(x=chr, fill=gene_type)) + geom_bar(position=&quot;dodge&quot;) + scale_fill_brewer(palette=&quot;Dark2&quot;) "],["faceting.html", "8.12 Faceting", " 8.12 Faceting ggplot2 provides facet functions in R, that allow to easily split the plot, according to a given variable. For example, we can start again from the gtf object. You can run the following command if you do not have the data loaded in your environment: gtf &lt;- read_csv(&quot;DataViz_source_files-main/files/gencode.v44.annotation.csv&quot;) We produced a barplot out of this data. However, there is one variable that we did not consider: strand. Using the faceting function facet_wrap, one can easily split that barplot into 2 plots: one will represent the + strand, one will represent the - strand. ggplot(data=gtf, mapping=aes(x=chr, fill=gene_type)) + geom_bar(position=&quot;dodge&quot;) + facet_wrap(~strand) "],["faceting-1.html", "Part9 Faceting", " Part9 Faceting ggplot2 provides facet functions in R, that allow to easily split the plot, according to a given variable. For example, we can start again from the gtf object. You can run the following command if you do not have the data loaded in your environment: gtf &lt;- read_csv(&quot;DataViz_source_files-main/files/gencode.v44.annotation.csv&quot;) We produced a barplot out of this data. However, there is one variable that we did not consider: strand. Using the faceting function facet_wrap, one can easily split that barplot into 2 plots: one will represent the + strand, one will represent the - strand. ggplot(data=gtf, mapping=aes(x=chr, fill=gene_type)) + geom_bar(position=&quot;dodge&quot;) + facet_wrap(~strand) "],["data-filtering.html", "Part10 Data filtering", " Part10 Data filtering We will now see a couple of basic functions to filter and select a data object. "],["filter.html", "10.1 filter()", " 10.1 filter() filter() will filter rows. If we take the geneexp objet as an example, we can filter only down-regulated genes using the filter() function of {dplyr}. In case you need to import the data again: geneexp &lt;- read_csv(&quot;DataViz_source_files-main/files/expression_20genes.csv&quot;) filter(geneexp, DE==&quot;Down&quot;) ## # A tibble: 5 × 4 ## Gene DE sample1 sample2 ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 AKT3 Down 15.1 1.57 ## 2 STAT3 Down 15.2 5.46 ## 3 HPK1 Down 14.1 7.34 ## 4 STAT5 Down 18.6 9.21 ## 5 ADAM17 Down 16.1 10.3 == is a logical operator that represens equality. It means that filter will return rows in geneexp that are exactly equal to “Down”. Logical operators: Operator Description &lt; less than &lt;= less than or equal to &gt; greater than &gt;= greater than or equal to == exactly equal to != not equal to !x not x x y x &amp; y x AND y We can have several conditions. For example, we may want to extract only Up or Down rows from geneexp column DE: filter(geneexp, DE==&quot;Down&quot; | DE==&quot;Up&quot;) ## # A tibble: 8 × 4 ## Gene DE sample1 sample2 ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 AKT3 Down 15.1 1.57 ## 2 STAT3 Down 15.2 5.46 ## 3 HPK1 Down 14.1 7.34 ## 4 TLR8 Up 2.69 16.3 ## 5 STAT5 Down 18.6 9.21 ## 6 ADAM17 Down 16.1 10.3 ## 7 PTEN Up 0.0210 11.2 ## 8 MAPK2 Up 0.998 9.56 Here, we introduce another operator, |, which mean OR, so rows will be kept if there is either Down or Up in DE column. A good practice is to assign the filtered output to a new object, for example: geneexp_filt &lt;- filter(geneexp, DE==&quot;Down&quot; | DE==&quot;Up&quot;) "],["select.html", "10.2 select()", " 10.2 select() select() will select columns. Select only columns Gene and DE from geneexp: select(geneexp, Gene, DE) ## # A tibble: 20 × 2 ## Gene DE ## &lt;chr&gt; &lt;chr&gt; ## 1 DKK1 No ## 2 TP53 No ## 3 BRCA1 No ## 4 AKT3 Down ## 5 CCND1 No ## 6 AXL No ## 7 STAT3 Down ## 8 CCL1 No ## 9 TRAF2 No ## 10 IL1R No ## 11 TAB2 No ## 12 HPK1 Down ## 13 TLR8 Up ## 14 TGFB No ## 15 STAT5 Down ## 16 ADAM17 Down ## 17 PTEN Up ## 18 SMRT No ## 19 DVL No ## 20 MAPK2 Up Again, a good practice is to save that subset into a new object: geneexp_selected &lt;- select(geneexp, Gene, DE) "],["rename.html", "10.3 rename()", " 10.3 rename() You can easily rename a column using the rename() function. For example, we can rename column Gene to Symbol, the following way: rename(geneexp, Symbol=Gene) ## # A tibble: 20 × 4 ## Symbol DE sample1 sample2 ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 DKK1 No 9.06 5.27 ## 2 TP53 No 3.57 8.55 ## 3 BRCA1 No 7.39 8.24 ## 4 AKT3 Down 15.1 1.57 ## 5 CCND1 No 6.74 10.1 ## 6 AXL No 13.5 16.6 ## 7 STAT3 Down 15.2 5.46 ## 8 CCL1 No 5.28 7.09 ## 9 TRAF2 No 8.93 12.9 ## 10 IL1R No 8.46 15.3 ## 11 TAB2 No 9.76 14.6 ## 12 HPK1 Down 14.1 7.34 ## 13 TLR8 Up 2.69 16.3 ## 14 TGFB No 7.83 12.5 ## 15 STAT5 Down 18.6 9.21 ## 16 ADAM17 Down 16.1 10.3 ## 17 PTEN Up 0.0210 11.2 ## 18 SMRT No 11.7 16.9 ## 19 DVL No 4.33 6.84 ## 20 MAPK2 Up 0.998 9.56 The first argument is the data, then comes the column(s) to rename in the format: new_name=old_name. "],["exercise-3.html", "10.4 Exercise 3", " 10.4 Exercise 3 We will start from gtf object. Read it as follows, if it is not in your environment: gtf &lt;- read_csv(&quot;DataViz_source_files-main/files/gencode.v44.annotation.csv&quot;) Rename column chr to Chromosome. Assign to a new object. correction gtf2 &lt;- rename(gtf, chromosome=chr) 2. Keep only rows corresponding to the + strand and to chromosome chr4. assign to a new object. correction gtf3 &lt;- filter(gtf2, strand==&quot;+&quot; &amp; chromosome==&quot;chr4&quot;) Select only columns gene_symbol and gene_type. correction gtf4 &lt;- select(gtf3, gene_symbol, gene_type) More advanced (as reference, or if someone asks): perform previous 3 lines of codes as a one-liner: The tidyverse provides a function %&gt;% which pipes the output of one function as the input of the next function. This way, different functions from the tidyverse can be linked together into a clean piece of code. If we want to produce a one-liner out of the 3 lines of code of the exercise, we can do it the following way: gtf_final &lt;- rename(gtf, chromosome=chr) %&gt;% filter(strand==&quot;+&quot; &amp; chromosome==&quot;chr4&quot;) %&gt;% select(gene_symbol, gene_type) If you want to learn more about the pipe, you can for example refer to that page. "],["final-exercises.html", "Part11 Final exercises", " Part11 Final exercises The following sets of exercises aim to help you practice what was learned during this workshop. Exercise A: barplot Exercise B: scatter plot Exercise C: boxplot "],["exercise-a-barplots.html", "11.1 Exercise A: barplots", " 11.1 Exercise A: barplots Import DataViz_source_files-main/files/population_age_group_per_sex_long_format.csv into an object called pop_age. correction pop_age &lt;- read_csv(&quot;DataViz_source_files-main/files/population_age_group_per_sex_long_format.csv&quot;) Create a barplot that shows the number of people per Year: correction ggplot(data=pop_age, mapping=aes(x=Year, y=Population)) + geom_bar(stat=&quot;identity&quot;) Split the view by Sex: correction ggplot(data=pop_age, mapping=aes(x=Year, y=Population, fill=Sex)) + geom_bar(stat=&quot;identity&quot;) Select only “Spain” in “Country”: correction ggplot(data=filter(pop_age, Country==&quot;Spain&quot;), mapping=aes(x=Year, y=Population, fill=Sex)) + geom_bar(stat=&quot;identity&quot;) Show the bars next to each other. correction ggplot(data=filter(pop_age, Country==&quot;Spain&quot;), mapping=aes(x=Year, y=Population, fill=Sex)) + geom_bar(stat=&quot;identity&quot;, position=&quot;dodge&quot;) Change default colors using scale_fill_manual() layer. The structure is not easy to remember: take a peek at the answer! correction ggplot(data=filter(pop_age, Country==&quot;Spain&quot;), mapping=aes(x=Year, y=Population, fill=Sex)) + geom_bar(stat=&quot;identity&quot;, position=&quot;dodge&quot;) + scale_fill_manual(values=c(&quot;darkgreen&quot;, &quot;red&quot;)) Add a title, change the theme / background: correction ggplot(data=filter(pop_age, Country==&quot;Spain&quot;), mapping=aes(x=Year, y=Population, fill=Sex)) + geom_bar(stat=&quot;identity&quot;, position=&quot;dodge&quot;) + scale_fill_manual(values=c(&quot;darkgreen&quot;, &quot;red&quot;)) + ggtitle(&quot;Spanish population from 1950 to 2021 per sex&quot;) + theme_minimal() Save to a PDF file: Export -&gt; Save as PDF. Note: when saving to PDF format, you cannot manualy drag the plot to get the size and proportion you want, but you can Preview before saving it. Only if you have time! Select data from Italy and for the year 2000. Create a barplot that shows Sex in y, Population in y and that is split by the Age_group. Show the proportions (remember: position=“fill”) correction ggplot(data=filter(pop_age, Country==&quot;Spain&quot; &amp; Year==2000), mapping=aes(x=Sex, y=Population, fill=Age_group)) + geom_bar(stat=&quot;identity&quot;, position=&quot;dodge&quot;) "],["exercise-b-scatter-plot.html", "11.2 Exercise B: scatter plot", " 11.2 Exercise B: scatter plot Import DataViz_source_files-main/files/GSE150029_rnaseq_log2.csv into an object called rnaseq. correction rnaseq &lt;- read_csv(&quot;DataViz_source_files-main/files/GSE150029_rnaseq_log2.csv&quot;) Create a scatter plot that represents sample CTRL on the x axis and sample EZH on the y axis. correction ggplot(data=rnaseq, mapping=aes(x=CTRL, y=EZH)) + geom_point() 3. Color the points according to the gene_biotype correction ggplot(data=rnaseq, mapping=aes(x=CTRL, y=EZH, color=gene_biotype)) + geom_point() 3. Not very readable! Filter and plot only data corresponding to lincRNA and miRNA. correction ggplot(data=filter(rnaseq, gene_biotype==&quot;lincRNA&quot; | gene_biotype==&quot;miRNA&quot;), mapping=aes(x=CTRL, y=EZH, color=gene_biotype)) + geom_point() 4. Now select and only those lincRNAs and miRNAs that are expressed in CTRL at least 1.5 times more than in EZH. correction ggplot(data=filter(rnaseq, gene_biotype==&quot;lincRNA&quot; | gene_biotype==&quot;miRNA&quot; &amp; CTRL &gt; 1.5*EZH), mapping=aes(x=CTRL, y=EZH, color=gene_biotype)) + geom_point() "],["exercise-c-boxplot.html", "11.3 Exercise C: boxplot", " 11.3 Exercise C: boxplot Import DataViz_source_files-main/files/GSE150029_rnaseq_log2_long.csv into an object called rnaseq2. correction rnaseq2 &lt;- read_csv(&quot;DataViz_source_files-main/files/GSE150029_rnaseq_log2_long.csv&quot;) Note that the information contained in that file is the same as for the previous exercise, but in a different format: this one is in a so-called long format, i.e. one observation (value) per row. Create a boxplot that will represent the samples on the x axis, and their expression on the y axis. correction ggplot(data=rnaseq2, mapping=aes(x=sample, y=log2_counts)) + geom_boxplot() Split the boxes per gene_biotype. correction ggplot(data=rnaseq2, mapping=aes(x=sample, y=log2_counts, fill=gene_biotype)) + geom_boxplot() Select only protein_coding and lincRNA and split again the boxes per gene_biotype. correction ggplot(data=filter(rnaseq2, gene_biotype==&quot;protein_coding&quot; | gene_biotype==&quot;lincRNA&quot;), mapping=aes(x=sample, y=log2_counts, fill=gene_biotype)) + geom_boxplot() Produce a different view from this boxplot: set the gene_biotype on the x axis, and split by sample. correction ggplot(data=rnaseq2, mapping=aes(x=gene_biotype, y=log2_counts, fill=sample)) + geom_boxplot() "],["bonus-interactive-plots.html", "Part12 Bonus: interactive plots", " Part12 Bonus: interactive plots {plotly} is a package that makes interactive graphs. There are many applications to plotly, but a simple one is to convert a plot created by ggplot into an interactive version. First we can install plotly (bottom-right panel -&gt; Packages -&gt; Install). And then we load the package: tick the package in the list. Let’s read again one of our first data file: geneexp &lt;- read_csv(&quot;DataViz_source_files-main/files/expression_20genes.csv&quot;) We can first save the “ggplot” as an object myplot: myplot &lt;- ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2, label=genes)) + geom_point() And then input that object into the ggplotly() function: ggplotly(p=myplot) The interactive plot should appear in the Viewer tab (bottom-right panel). "],["resources.html", "Part13 Resources", " Part13 Resources RStudio/Tidyverse cheatsheets: RStudio ggplot2 dplyr tidyr readr ggplot2 cheatsheet ggplot elegant graphics for data analysis R graph gallery R graphics cookbook ggplot2 extensions "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
